Funciones Globales para onclick:
NO VEO CAMBIOS AQUÍ. Las funciones abrirModalEditar, eliminarProducto, abrirModalAjusteStock y abrirModalDetalleProducto siguen estando definidas DENTRO del DOMContentLoaded.
Esto significa que los botones generados dinámicamente en la tabla con onclick="abrirModalEditar(...)" etc., seguirán SIN FUNCIONAR porque esas funciones no están en el ámbito global.
ACCIÓN CRÍTICA REQUERIDA: Debes mover la definición de estas funciones fuera del DOMContentLoaded o adjuntarlas explícitamente a window como te indiqué anteriormente. Esta es la causa más probable si tus botones de acción en la tabla no hacen nada.
// FUERA DEL DOMContentLoaded
async function abrirModalDetalleProducto(productId) {
    // ... tu lógica ...
    // Necesitarás acceso a modalDetalleProducto, detalleProductoInfoDiv, tbodyHistorialMovimientos
    // Si estos se definen dentro del DOMContentLoaded, no serán accesibles aquí directamente.
    // Deberás obtenerlos dentro de esta función o pasarlos como argumentos si es necesario.
    // O, definir estas variables globalmente (menos ideal pero funciona para un solo archivo).
    const modalDetalleProducto = document.getElementById('modalDetalleProducto');
    const detalleProductoInfoDiv = document.getElementById('detalleProductoInfo');
    const tablaHistorialMovimientosBody = document.getElementById('tbodyHistorialMovimientos'); // Corregí el ID aquí también.
    // ... resto de tu función ...
}
// Hacer lo mismo para abrirModalEditar, eliminarProducto, abrirModalAjusteStock

document.addEventListener('DOMContentLoaded', () => {
    // ... el resto de tu código que SÍ depende del DOM listo ...
});
La forma más fácil y directa, si vas a mantener todo en este archivo y no quieres pasar múltiples elementos del DOM como parámetros, sería declarar las variables de los elementos del DOM que estas funciones globales necesitan también en el ámbito global (fuera del DOMContentLoaded), e inicializarlas dentro del DOMContentLoaded.
let modalDetalleProducto, detalleProductoInfoDiv, tablaHistorialMovimientosBody; // Declarar globalmente

async function abrirModalDetalleProducto(productId) {
    // Ahora modalDetalleProducto, etc., son accesibles.
    if (!modalDetalleProducto || !detalleProductoInfoDiv || !tablaHistorialMovimientosBody) {
        console.error("Elementos del modal de detalle no están listos.");
        return;
    }
    // ... tu lógica ...
}
// Y así para las otras funciones y sus elementos necesarios

document.addEventListener('DOMContentLoaded', () => {
    // Inicializar las variables globales
    modalDetalleProducto = document.getElementById('modalDetalleProducto');
    detalleProductoInfoDiv = document.getElementById('detalleProductoInfo');
    tablaHistorialMovimientosBody = document.getElementById('tbodyHistorialMovimientos'); // Corregido
    // ... inicializar todas las demás variables de elementos DOM ...

    // ... el resto de tu código que SÍ depende del DOM listo ...
});
ACCIÓN CRÍTICA: Arregla el Scope de las Funciones para onclick:
Mueve las definiciones de abrirModalEditar(productId), eliminarProducto(productId), abrirModalAjusteStock(productId, productName, allowDecimals), y abrirModalDetalleProducto(productId) para que sean globales (fuera del DOMContentLoaded o asignadas a window).
Asegúrate de que estas funciones globales tengan acceso a las variables de elementos del DOM que necesitan (declarando esas variables de elementos también globalmente e inicializándolas en DOMContentLoaded).
Revisa y Corrige TODOS los getElementById en product_management.js para que los IDs coincidan exactamente con los id en product_management.html. Presta atención a:
productId vs productoId
modalAjusteStock (HTML) vs modalAjustarStock (JS)
ajusteProductoId (HTML) vs productoIdAjuste (JS)
ajusteNombreProducto (HTML) vs nombreProductoAjuste (JS)
ajusteTipoMovimiento (HTML) vs tipoMovimiento (JS)
ajusteMotivo (HTML) vs ajusteNotas (JS)
tablaHistorialMovimientos (ID de la tabla en HTML) vs tbodyHistorialMovimientos (ID del tbody en HTML) - asegúrate de seleccionar el tbody en JS.
modalTitle (JS) vs el <h2> sin ID en el HTML del modal de producto.
Añade id="modalTitle" al <h2> dentro de modalProducto en tu HTML, o cambia el selector en JS.
Añade el checkbox id="productIsActive" al formProducto en tu HTML si quieres controlar este estado desde el formulario de edición.
Añade el elemento id="infoDecimalesAjuste" al HTML del modal de ajuste de stock si aún no está.